      <div class="jumbotron">
        <h2>一字千金 成語軌跡錄影程式</h2>
      </div>
      <div class="row">
        <% @visitors.each do |x| %>
        <div class="col-md-3">
          <div><%= x.number %>號參賽者</div>
          <div id="console_<%= x.number %>" style="border:1px solid black;line-height:95%;width:100%;height:200px;margin-bottom:12px;overflow:auto;"></div>
        </div>
        <% end %>
      </div>
        
      <% content_for :javascripts do %>
      <%= javascript_include_tag 'pinhole' %>
      <script>

      var preActionCount = 0;
      var fileSaveActionCount = 0;
      var delayTime = 60;

      var blockToUserIdMap = {};

      var receiveDownHandler = function(o){
        var row = o.block.row;
        var col = o.block.column;
        CR(row + '_' + col).point({ stamp: o.stamp, x: o.x, y: o.y }, writeToLog);
      };

      var receiveMoveHandler = function(o){
        var row = o.block.row;
        var col = o.block.column;
        CR(row + '_' + col).line({ stamp: o.stamp, x: o.x, y: o.y }, writeToLog);
      };

      var receiveUpHandler = function(o){};

      var receiveClearHandler = function(o){
        var row = o.block.row;
        var col = o.block.column;
        CR(row + '_' + col).clear(o.stamp);
      };

      var receiveDeviceStartHandler = function(o){
        var row = o.block.row;
        var col = o.block.column;
        CR(row + "_" + col).start(o.stamp, startCallBack);
      };

      var receiveDeviceStopHandler = function(o){
        var row = o.block.row;
        var col = o.block.column;
        CR(row + "_" + col).stop(o.stamp, stopCallBack(o));
      };

      var receiveResetHandler = function(o){
        if(o && o.stage){
          //if(o.stage != "<%= @stage %>"){
            $.getJSON('/games/get_game_data.json?id=record',
              function(data){            
                //var res = JSON.parse(data);
                //alert(data);
                if(data.recordUrl){
                  window.location.replace(data.recordUrl);
                }
              }
            ).fail(function(e){
              console.log('error');
            });
          //}
        }
      };

      var receiveSaveRecordHandler = function(o){
        if(o.is_saved || o.log) return;
        var count = CR.cacheCount * 3;
        CR.compileAll(
          (function(total){
            var scope = window.pinhole;
            return function(data){
              setTimeout((function(dispatcher, name){
                return function(){
                  dispatcher.trigger("save_record", { log: '編號[' + name + ']筆跡轉換中', total_count: total });
                };
              })(scope.dispatcher, data.key), 10);
            };
          })(count),
          (function(total){
          var scope = window.pinhole;
          return function(data){
            if(data && data.length > 0){
              for(var i = 0, len = data.length; i < len; i++){
                var item = data[i];
                if(item.start){
                  setTimeout((function(dispatcher, t){
                    return function(){
                      dispatcher.trigger("open_file", {
                        user_id: blockToUserIdMap[t.id],
                        trade_key: t.key,
                        create_at: t.key.split('-')[1].substr(0, 10), // time exclude millseconds
                        game: <%= @game.id %>,
                        stage: '<%= @stage %>'
                      });
                      dispatcher.trigger("save_record", { log: '編號[' + t.key + ']存檔中', total_count: total });
                    };
                  })(scope.dispatcher, item), fileSaveActionCount++ * delayTime);
                }

                setTimeout((function(dispatcher, t){
                  return function(){
                    dispatcher.trigger("save_file", {
                      user_id: blockToUserIdMap[t.id],
                      timestamp: t.stamp.toString(),
                      base64: t.base64.split(',')[1],
                      trade_key: t.key
                    });
                  };
                })(scope.dispatcher, item), fileSaveActionCount++ * delayTime);

                if(item.end){
                  setTimeout((function(dispatcher, t, isEnd){
                    return function(){
                      dispatcher.trigger("close_file", {
                        user_id: blockToUserIdMap[t.id],
                        trade_key: t.key,
                        is_total_end: isEnd,
                        total_count: total
                      });
                    };
                  })(scope.dispatcher, item, i + 1 == len), fileSaveActionCount++ * delayTime);
                }


              }
              /*
              setTimeout((function(dispatcher){
                return function(){
                  dispatcher.trigger("save_record", { is_saved: true });
                };
              })(scope.dispatcher), fileSaveActionCount * delayTime);
              */
            }
          };
        })(count));

      };

      $(document).ready(function() {
        CR.prop({
          width: 500,
          height: 500,
          lineWidth: 13,
          lineColor: '#ececec',
          frameRate: 50,
          cacheLastFrame: true,
          lazyOutput: true,
          backgroundImage: '/assets/block-524-black-with-line.png'
        });

        <% (1..8).to_a.each do |x| %>
            <% (1..12).to_a.each do |y| %>
              CR.reg('<%= x %>_<%= y %>');
            <% end %>
        <% end %>

        //window.pinhole = new Pinhole('0');
        window.pinhole = new Pinhole('record');
		    window.pinhole.bindEvents();

        var currentLog = "";

        window.stopCallBack = function(o) {
          var scope = window.pinhole;
          var uid = o.user_id;
          var row = o.block.row;
          var col = o.block.column;
          blockToUserIdMap[row + '_' + col] = uid;
          var element = $("#console_"+uid);
          //var pre = element.html();
          return function(data) {
            element.html(currentLog += 'STOP<br/>');

            /*
            var tkey = uid + "_" + (new Date()).getTime().toString();

            setTimeout((function(dispatcher, id, key){
              return function(){
                dispatcher.trigger("open_file", {
                  user_id: id,
                  trade_key: key,
                  game: <%= @game.id %>,
                  stage: '<%= @stage %>'
                });
              };
            })(scope.dispatcher, uid, tkey), fileSaveActionCount++ * delayTime);


            for (var i = 0, len = data.length; i < len; i++){
              var frameInfo = {
                user_id: uid, 
                timestamp: data[i].stamp.toString(), 
                base64: data[i].base64.split(',')[1],
                trade_key: tkey
              };
              setTimeout((function(dispatcher, obj){
                return function(){
                  dispatcher.trigger("save_file", obj);
                };
              })(scope.dispatcher, frameInfo), fileSaveActionCount++ * delayTime);

            }

            setTimeout((function(dispatcher, id, key){
              return function(){
                dispatcher.trigger("close_file", {
                  user_id: id,
                  trade_key: key
                });
              };
            })(scope.dispatcher, uid, tkey), fileSaveActionCount++ * delayTime);
            */


            /*
            var i, len;
            scope.dispatcher.trigger("open_file", {
              user_id: uid
            });
            i = 0;
            len = data.length;
            while (i < len) {
              setTimeout((function(dispatcher, last, obj){
                return function(){
                  dispatcher.trigger("save_file", obj);
                  if(last){
                    dispatcher.trigger("close_file", {user_id: obj.user_id});
                  }
                };
              })(scope.dispatcher, (i + 1 == len), {
                user_id: uid, 
                timestamp: data[i].stamp.toString(), 
                base64: data[i].base64.split(',')[1]
              }), fileSaveActionCount * 60);
              
              fileSaveActionCount++;
              i++;
            }
            */

          };
        };

        /*
        setInterval(function(){
          if(fileSaveActionCount == preActionCount){
            fileSaveActionCount = preActionCount = 0;
          }else{
            preActionCount = fileSaveActionCount;
          }
        },1300);
        */

        window.startCallBack = function(){
          var id = this.id_;
          var element = $("#console_"+id);
          currentLog = "";
          currentLog += 'START<br/>';
          element.html(currentLog);
        }

        window.writeToLog = function(pt){
          var id = this.id_;
          var element = $("#console_"+id);
          currentLog += 'stamp:'+pt.stamp + ' x:' + pt.x + ' y:' + pt.y + '<br/>';
          element.html(currentLog);
        };
      

      });
      </script>
      <% end %>